// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-1.1.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   Int           @id @default(autoincrement())
  name                 String
  lastname             String
  email                String        @unique
  photo                String?
  role_id              Int
  role                 Role          @relation(fields: [role_id], references: [id])
  description          String?
  mentorship           Mentorship[]
  appointments_student Appointment[] @relation("student_relation")
  appointments_tutor   Appointment[] @relation("tutor_relation")
  career_id            Int
  career               Career        @relation(fields: [career_id], references: [id])
  Document             Document[]
}

model Day {
  id         Int          @id @default(autoincrement())
  name       String
  mentorship Mentorship[]
}

model Mentorship {
  id           Int           @id @default(autoincrement())
  capacity     Int
  work_days    Day[]
  subject_id   Int
  subject      Subject       @relation(fields: [subject_id], references: [id])
  category_id  Int
  category     Category      @relation(fields: [category_id], references: [id])
  currency_id  Int
  currency     Currency      @relation(fields: [currency_id], references: [id])
  tutor_id     Int
  tutor        User          @relation(fields: [tutor_id], references: [id])
  hourly_price Float
  appointments Appointment[]
}

model Appointment {
  id            Int                  @id @default(autoincrement())
  created_at    DateTime             @default(now())
  date          DateTime
  student_id    Int
  student       User                 @relation("student_relation", fields: [student_id], references: [id])
  tutor_id      Int
  tutor         User                 @relation("tutor_relation", fields: [tutor_id], references: [id])
  mentorship_id Int
  mentorship    Mentorship           @relation(fields: [mentorship_id], references: [id])
  status        Appointment_status[]
}

model Appointment_status {
  id            Int         @id @default(autoincrement())
  status_id     Int
  status        Status      @relation(fields: [status_id], references: [id])
  appointmentId Int
  Appointment   Appointment @relation(fields: [appointmentId], references: [id])
  created_at    DateTime    @default(now())

  @@index([appointmentId], name: "appointmentId")
  @@index([status_id], name: "status_id")
}

model Status {
  id          Int                  @id @default(autoincrement())
  name        String
  appointment Appointment_status[]
}

model Document {
  id          Int      @id @default(autoincrement())
  name        String
  path        String
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  subject_id  Int
  subject     Subject  @relation(fields: [subject_id], references: [id])
  created_by  Int
  User        User     @relation(fields: [created_by], references: [id])
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Currency {
  id         Int          @id @default(autoincrement())
  name       String
  symbol     String
  mentorship Mentorship[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String
  category_id Int
  Category    Category     @relation(fields: [category_id], references: [id])
  mentorship  Mentorship[]
  Document    Document[]
}

model Category {
  id         Int          @id @default(autoincrement())
  name       String
  mentorship Mentorship[]
  Document   Document[]
  Subject    Subject[]
}

model Career {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

// turso db shell unet-test < ./prisma/migrations/20240518214742_days_table/migration.sql
// wsl -d Ubuntu
